# 프로젝트 기술스택

## 1. 프론트엔드 기술

### React.js
- **용도**: 사용자 인터페이스 구축을 위한 JavaScript 라이브러리
- **역할**: 컴포넌트 기반으로 재사용 가능한 UI 요소들을 만들고, 상태 관리를 통해 동적인 웹 애플리케이션 구현
- **필요한 이유**: 채팅방, 워크샵, 스레드 등 복잡한 UI 구조를 효율적으로 관리하고, 실시간 업데이트가 필요한 인터페이스 구현
- **주요 특징**: Virtual DOM, 컴포넌트 재사용성, 풍부한 생태계

### JavaScript (ES6+)
- **용도**: 웹 개발을 위한 프로그래밍 언어
- **역할**: 동적인 웹 페이지 기능 구현, 사용자 상호작용 처리
- **필요한 이유**: 브라우저 네이티브 언어로 빠른 개발 가능, 별도 트랜스파일링 불필요
- **주요 특징**: 
  - ES6+ 문법 (화살표 함수, 구조 분해, async/await)
  - 동적 타이핑으로 빠른 프로토타이핑
  - 즉시 실행 가능한 환경

### Tailwind CSS <- 부트스트랩 쓴다고 생각
- **용도**: 유틸리티 우선 CSS 프레임워크
- **역할**: 빠른 UI 스타일링과 일관된 디자인 시스템 구축
- **필요한 이유**: 반응형 디자인 구현, 개발 속도 향상, 디자인 일관성 유지
- **주요 특징**: 유틸리티 클래스, 커스터마이징 가능, 작은 번들 크기

## 2. 백엔드 기술

### Spring Boot
- **용도**: Java 기반 웹 애플리케이션 프레임워크
- **역할**: RESTful API 서버 구축, 비즈니스 로직 처리, 데이터베이스 연동
- **필요한 이유**: 
  - 엔터프라이즈급 안정성과 확장성
  - 강력한 보안 기능
  - 풍부한 라이브러리 생태계
- **주요 특징**: 
  - 자동 설정 (Auto Configuration)
  - 내장 서버 (Embedded Server)
  - 의존성 주입 (Dependency Injection)
  - AOP (Aspect-Oriented Programming)

### Java 17+ (또는 Java 11+)
- **용도**: 백엔드 서버 개발을 위한 프로그래밍 언어
- **역할**: 안정적이고 확장 가능한 서버 애플리케이션 개발
- **필요한 이유**: 
  - 강타입 언어로 안정성 보장
  - JVM 기반 높은 성능
  - 대규모 시스템에 적합
- **주요 특징**: 멀티스레딩, 가비지 컬렉션, 플랫폼 독립성

### Spring Security + JWT
- **용도**: 인증 및 권한 부여 프레임워크
- **역할**: 사용자 로그인, 권한 관리, API 보안
- **필요한 이유**: 
  - 회원가입/로그인 기능
  - 사용자별 권한 관리
  - API 엔드포인트 보안
- **주요 특징**: 
  - JWT 토큰 기반 무상태 인증
  - 메소드 레벨 보안
  - OAuth2 지원

### Spring WebSocket + STOMP + SockJS
- **용도**: 실시간 양방향 통신 구현
- **역할**: 실시간 채팅, 알림, 라이브 업데이트
- **필요한 이유**: 채팅 기능, 실시간 알림, 워크샵 실시간 업데이트
- **주요 특징**: 
  - STOMP 프로토콜로 구조화된 메시징
  - SockJS로 WebSocket 폴백 지원
  - 메시지 브로커 패턴

### Spring Data JPA + Hibernate
- **용도**: 객체 관계 매핑(ORM) 및 데이터 액세스 계층
- **역할**: 데이터베이스 CRUD 작업, 엔티티 관리
- **필요한 이유**: 
  - SQL 작성 없이 데이터베이스 조작
  - 객체 지향적 데이터 접근
  - 자동 쿼리 생성
- **주요 특징**: Repository 패턴, 지연 로딩, 캐싱

### Maven 또는 Gradle
- **용도**: 빌드 도구 및 의존성 관리
- **역할**: 프로젝트 빌드, 라이브러리 관리, 배포 패키징
- **필요한 이유**: Java 프로젝트의 표준 빌드 도구
- **주요 특징**: 의존성 자동 해결, 멀티 모듈 지원, 플러그인 생태계

## 3. 데이터베이스

### MySQL 8.0+
- **용도**: 관계형 데이터베이스 관리 시스템
- **역할**: 사용자, 채팅, 워크샵, 포스트 등 구조화된 데이터 저장
- **필요한 이유**: 
  - 널리 사용되는 오픈소스 DB
  - 우수한 성능과 안정성
  - 풍부한 도구와 호스팅 옵션
- **주요 특징**: 
  - ACID 트랜잭션 지원
  - JSON 데이터 타입 지원
  - 강력한 인덱싱
  - 복제 및 클러스터링

### Redis
- **용도**: 인메모리 데이터 구조 저장소
- **역할**: 세션 관리, 캐싱, 실시간 데이터 저장
- **필요한 이유**: 빠른 데이터 액세스, 세션 저장, WebSocket 메시지 브로커
- **주요 특징**: 높은 성능, 다양한 데이터 구조, 영속성 옵션

## 4. AI/외부 서비스

### OpenAI API
- **용도**: 인공지능 언어 모델 서비스
- **역할**: 텍스트 감성 분석, 내용 요약, 자연어 처리
- **필요한 이유**: 포스트/코멘트 감성 분석, 대화 내용 요약 기능
- **Spring 연동**: RestTemplate 또는 WebClient로 HTTP API 호출
- **주요 특징**: 고성능 언어 모델, 다양한 NLP 작업, RESTful API

### Google Translate API
- **용도**: 자동 번역 서비스
- **역할**: 메일 내용 번역, 다국어 지원
- **필요한 이유**: 웹메일 번역 기능, 국제 사용자 지원
- **Spring 연동**: HTTP 클라이언트로 Google Cloud API 호출
- **주요 특징**: 100+ 언어 지원, 높은 번역 품질, RESTful API

### LlamaIndex (Python 서비스)
- **용도**: 대용량 문서 검색 및 RAG 프레임워크
- **역할**: 업로드된 파일들을 검색하고 AI와 연동하여 질의응답 제공
- **필요한 이유**: 워크샵/스레드 파일 검색, 지능형 문서 검색 기능
- **Spring 연동**: 별도 Python 마이크로서비스로 구축 후 REST API 통신
- **주요 특징**: 다양한 문서 형식 지원, 벡터 검색, LLM 통합

### DALL-E/Stable Diffusion API
- **용도**: AI 기반 이미지 생성 서비스
- **역할**: 텍스트 기반 이미지 생성, 크리에이티브 콘텐츠 제작
- **필요한 이유**: 이미지 생성 서비스, 메시지/포스트 첨부용 이미지 생성
- **Spring 연동**: HTTP 클라이언트로 외부 API 호출
- **주요 특징**: 텍스트-이미지 변환, 고품질 이미지, 다양한 스타일

## 5. 파일 관리

### AWS S3 <- 스토리지 서버용으로 써보는 게 좋을 것 같긴 한데 내 컴퓨터에서 돌려도 괜찮은 부분
- **용도**: 클라우드 객체 스토리지 서비스
- **역할**: 파일 저장, 관리, 배포
- **필요한 이유**: 확장 가능한 파일 저장소, 안전한 파일 관리, 글로벌 액세스
- **Spring 연동**: AWS SDK for Java 사용
- **주요 특징**: 높은 가용성, 보안, CDN 연동 가능

### Spring Boot File Upload -- 그냥 이런 게 있다
- **용도**: 파일 업로드 처리
- **역할**: 멀티파트 폼 데이터 처리, 파일 업로드 관리
- **필요한 이유**: 포스트/코멘트 파일 첨부, 프로필 이미지 업로드
- **구현**: MultipartFile 인터페이스 사용
- **주요 특징**: 파일 크기 제한, 타입 검증, 임시 저장소 관리

## 6. 메일 시스템

### Spring Boot Mail -- 그냥 이런 게 있다 2
- **용도**: 이메일 전송 및 수신 처리
- **역할**: 이메일 송신, SMTP/IMAP 연동
- **필요한 이유**: 웹메일 기능, 이메일 인증, 알림 메일
- **구현**: JavaMailSender 인터페이스 사용
- **주요 특징**: 
  - HTML 메일 지원
  - 첨부파일 처리
  - 템플릿 기반 메일 생성

웹 크롤링 - 아마 JSoup으로 충분

### Selenium WebDriver (Java)
- **용도**: 웹 브라우저 자동화 도구
- **역할**: 웹 페이지 크롤링, 동적 콘텐츠 수집
- **필요한 이유**: 크롤링 기능으로 웹 콘텐츠 수집, 파일 다운로드
- **Java 연동**: Selenium Java 바인딩 사용
- **주요 특징**: 실제 브라우저 환경, JavaScript 실행, 다양한 브라우저 지원

### JSoup (대안)
- **용도**: Java HTML 파서
- **역할**: 정적 HTML 콘텐츠 파싱 및 데이터 추출
- **필요한 이유**: 빠른 정적 콘텐츠 수집
- **주요 특징**: jQuery 스타일 셀렉터, 가벼운 라이브러리

배포 도구 <- 이건 안할지도 모름

### Docker
- **용도**: 컨테이너화 플랫폼
- **역할**: 애플리케이션 패키징, 배포 환경 일관성
- **필요한 이유**: 개발/운영 환경 통일, 확장성, 마이크로서비스 구조
- **Spring 연동**: Spring Boot JAR를 Docker 이미지로 패키징
- **주요 특징**: 경량 가상화, 이식성, 버전 관리

버전 관리 도구

### Git
- **용도**: 분산 버전 관리 시스템
- **역할**: 소스 코드 버전 관리, 협업
- **필요한 이유**: 코드 변경 이력 관리, 팀 협업, 배포 관리
- **주요 특징**: 분산 시스템, 브랜치 관리, 병합 기능

## 기술 스택 아키텍처

```
Frontend (React + JS)
       ↕ HTTP/WebSocket
Backend (Spring Boot + Java)
       ↕ JPA/JDBC
Database (MySQL + Redis)
       ↕ HTTP API
External Services (OpenAI, Google Translate, etc.)
```

## 개발 단계별 우선순위

1. **Phase 1**: Spring Boot 기본 API + MySQL + Redis
2. **Phase 2**: React 기본 UI + 사용자 인증
3. **Phase 3**: WebSocket 실시간 기능
4. **Phase 4**: 파일 업로드/S3 연동
5. **Phase 5**: AI 서비스 통합
6. **Phase 6**: 메일 시스템 및 크롤링 기능

